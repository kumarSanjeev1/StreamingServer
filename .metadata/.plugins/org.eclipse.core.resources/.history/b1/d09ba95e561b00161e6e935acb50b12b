package com.blah.server.logger;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import com.blah.client.logger.ClientPayLoad;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class ServerStreamHandler implements Callable<Boolean> {
	private String fileName;
	private String serviceName;
	private String hostName;
	private volatile  InputStream clientIs;
	private static final String SERVER_LOG_DIR = "";
	private int offsetOfActualData;
	private volatile FileOutputStream fos;
	private AtomicInteger  fileWriteIndex= new AtomicInteger();

	public ServerStreamHandler(Socket socket) {
		try {
			clientIs= socket.getInputStream();
			DataInputStream dis = new DataInputStream(socket.getInputStream());
			int jsonLength = dis.readInt();
			byte[] bytesToRead = new byte[jsonLength];
			offsetOfActualData=jsonLength;
			dis.read(bytesToRead, 32, jsonLength);
			String jsonAsString = new String(bytesToRead);
			ObjectMapper mapper = new ObjectMapper();

			ClientPayLoad payload = mapper.readValue(jsonAsString,
					ClientPayLoad.class);
			String fileName = payload.getFileName();
			File file = new File(SERVER_LOG_DIR + File.separatorChar + fileName);
			
			if (!file.exists()) {
				file.createNewFile();
				fos= new FileOutputStream(file);
			}

		} catch (JsonParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@Override
	public Boolean call() throws Exception {
		byte[] bytesRead= new byte[1000];
		int length= clientIs.read(bytesRead, offsetOfActualData, bytesRead.length);
		
		if(length !=-1){
			offsetOfActualData+=length;
			appendToFile(bytesRead,length);
		}
	}

	private void appendToFile(byte[] bytesRead, int length) {
		try {
			int writeOffset = fileWriteIndex.get();
			fos.write(bytesRead, writeOffset, length);
			fileWriteIndex.set(writeOffset+length);
			fos.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}
